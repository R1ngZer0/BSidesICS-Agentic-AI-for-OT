from pydantic import BaseModel, Field
from typing import List, Dict
from pydantic_ai import Agent, RunContext
from tools.vulnerability_scan_tool import VulnerabilityScanTool, VulnerabilityScanResult
from utils.db_helpers import DatabaseManager
from models.base_models import VulnerabilityRecord, Asset
from datetime import datetime

class VulnerabilityAnalysisRequest(BaseModel):
    vulnerability_data: Dict = Field(..., description="Raw vulnerability data to analyze")

class VulnerabilityAnalysisResponse(BaseModel):
    severity_assessment: str = Field(..., description="Assessed severity level")
    impact_analysis: str = Field(..., description="Analysis of potential impact")
    remediation_priority: str = Field(..., description="Recommended remediation priority")
    additional_context: str = Field(..., description="Additional context or recommendations")

vulnerability_agent = Agent(
    'openai:gpt-4o',
    result_type=VulnerabilityAnalysisResponse,
    system_prompt="""You are a cybersecurity expert specializing in vulnerability analysis.
    Your task is to analyze vulnerability scan data and provide expert assessment.
    Consider the vulnerability's severity, potential impact, and context when making recommendations.
    Focus on practical, actionable insights."""
)

class VulnerabilityScanManager:
    def __init__(self):
        self.scan_tool = VulnerabilityScanTool()
        self.agent = vulnerability_agent
        self.db = DatabaseManager()
    
    async def process_scan_files(self) -> Dict:
        """Process all vulnerability scan files in the input directory"""
        scan_files = self.scan_tool.list_scan_files()
        
        total_vulnerabilities = 0
        processed_files = 0
        results_summary = {
            "high_severity": 0,
            "medium_severity": 0,
            "low_severity": 0
        }
        
        for scan_file in scan_files:
            # Parse the scan file
            vulnerabilities = self.scan_tool.parse_scan_file(scan_file)
            
            for vuln_data in vulnerabilities:
                # Create vulnerability record
                vuln_record = VulnerabilityRecord(
                    vulnerability_id=vuln_data["vulnerability_id"],
                    title=vuln_data["title"],
                    description=vuln_data["description"],
                    severity=vuln_data["severity"],
                    cvss_score=vuln_data["cvss_score"],
                    remediation=vuln_data["remediation"],
                    detected_date=vuln_data["detected_date"]
                )
                
                # Get AI analysis
                analysis = await self.agent.run(
                    VulnerabilityAnalysisRequest(vulnerability_data=vuln_data)
                )
                
                # Update severity counts
                severity = analysis.data.severity_assessment.lower()
                if "high" in severity:
                    results_summary["high_severity"] += 1
                elif "medium" in severity:
                    results_summary["medium_severity"] += 1
                else:
                    results_summary["low_severity"] += 1
                
                # Store in vector database for semantic search
                await self.db.store_vector_embedding(
                    collection_name="vulnerabilities",
                    text=f"{vuln_data['title']}\n{vuln_data['description']}\n{analysis.data.impact_analysis}",
                    metadata={
                        "vulnerability_id": vuln_data["vulnerability_id"],
                        "severity": severity,
                        "cvss_score": vuln_data["cvss_score"]
                    },
                    embedding=None  # The DatabaseManager will handle getting the embedding
                )
                
                # Store in MongoDB
                await self.db.insert_vulnerability(vuln_record)
                
                total_vulnerabilities += 1
            
            processed_files += 1
        
        return {
            "processed_files": processed_files,
            "total_vulnerabilities": total_vulnerabilities,
            "severity_summary": results_summary
        } 