import xml.etree.ElementTree as ET
from typing import Dict, List, Optional
from datetime import datetime
import os
from pydantic import BaseModel

class VulnerabilityScanResult(BaseModel):
    host: str
    vulnerability_id: str
    title: str
    description: str
    severity: str
    cvss_score: Optional[float]
    remediation: Optional[str]
    detected_date: datetime
    raw_data: Dict

class VulnerabilityScanTool:
    def __init__(self):
        self.input_dir = "Data/vulnerability_scans"
        os.makedirs(self.input_dir, exist_ok=True)
    
    def list_scan_files(self) -> List[str]:
        """List all XML files in the vulnerability scans directory"""
        return [f for f in os.listdir(self.input_dir) if f.endswith('.xml')]
    
    def parse_scan_file(self, filename: str) -> List[Dict]:
        """Parse a vulnerability scan XML file"""
        file_path = os.path.join(self.input_dir, filename)
        tree = ET.parse(file_path)
        root = tree.getroot()
        
        results = []
        
        # This is a generic parser that needs to be adapted based on the specific
        # vulnerability scanner format (Nessus, OpenVAS, etc.)
        for host in root.findall(".//host"):
            ip = host.find(".//ip").text if host.find(".//ip") is not None else ""
            
            for vuln in host.findall(".//vulnerability"):
                result = {
                    "host": ip,
                    "vulnerability_id": vuln.get("id", ""),
                    "title": vuln.find("title").text if vuln.find("title") is not None else "",
                    "description": vuln.find("description").text if vuln.find("description") is not None else "",
                    "severity": vuln.find("severity").text if vuln.find("severity") is not None else "",
                    "cvss_score": float(vuln.find("cvss").text) if vuln.find("cvss") is not None else None,
                    "remediation": vuln.find("solution").text if vuln.find("solution") is not None else None,
                    "detected_date": datetime.now(),
                    "raw_data": self._element_to_dict(vuln)
                }
                results.append(result)
        
        return results
    
    @staticmethod
    def _element_to_dict(element: ET.Element) -> Dict:
        """Convert an XML element to a dictionary"""
        result = {}
        
        for child in element:
            if len(child) == 0:
                result[child.tag] = child.text
            else:
                result[child.tag] = VulnerabilityScanTool._element_to_dict(child)
                
        for key, value in element.attrib.items():
            result[f"@{key}"] = value
            
        return result 